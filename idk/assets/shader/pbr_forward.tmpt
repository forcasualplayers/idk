#version 450

#define MAX_LIGHTS 16

in VS_OUT
{
  vec3 position;
  vec2 uv;
  vec3 normal;
  vec3 tangent;
} fs_in;

// lighting 
// temporary light
struct Light
{
    int   type; // 0 for point, 1 for dir, 2 for spot
	vec3  color;
	
	vec3  v_pos;
	vec3  v_dir;
	
	float cos_inner;
	float cos_outer;
	
	float falloff;
};

U_LAYOUT(4, 0) uniform Light lights[MAX_LIGHTS];

// lighting functions 

const float PI = 3.1415926535;

vec3 fresnel(float cos_theta, vec3 f0)
{
	return f0 + (vec3(1.0) - f0) * pow(1.0 - cos_theta, 5.0);
}

float DistributionGGX(vec3 normal, vec3 half_vec, float roughness)
{
	float alpha  = roughness * roughness;
	float alpha2 = alpha * alpha;
	float NdotH  = max(dot(normal, half_vec), 0.0);
	float NdotH2 = NdotH * NdotH;
	
	float numer  = alpha2;
	float denom  = (NdotH2 * (alpha2 - 1.0) + 1.0);
	denom = PI * denom * denom;
	
	return numer / denom;
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
	float r = roughness + 1.0;
	float k = r *r / 8.0;
	
	float numer = NdotV;
	float denom = NdotV * (1.0 - k) + k;
	
	return numer / denom;
}

float GeometrySmith(vec3 normal, vec3 view, vec3 light, float roughness)
{
	float NdotV = max(dot(normal, view), 0.0);
	float NdotL = max(dot(normal, light), 0.0);
	
	float ggx2 = GeometrySchlickGGX(NdotV, roughness);
	float ggx1 = GeometrySchlickGGX(NdotL, roughness);
	
	return ggx1 * ggx2;
}

//__MATERIAL_UNIFORMS;

// forward shading only cares about color!
out vec4 out_color;

void main()
{
	// declare initial values here
	vec3  view_pos  = fs_in.position;
	vec3  normal    = normalize(fs_in.normal);
	
	vec3  albedo    = vec3(1, 0, 0);
	float metallic  = 0.5;
	float roughness = 0.5;
	float ambient_o = 0;

	//__MATERIAL_CODE__;

	// then compute color here 
	
	vec3 light_accum = vec3(0);
	
	// temporary light code
	Light light;
    light.type = 0;
	light.color = vec3(1.0);
	light.v_pos = vec3(0.0);
	
	vec3  light_dir =  light.v_pos - view_pos;
	float dist      =  length(light.v_pos - view_pos); light_dir /= dist;
	vec3  view_dir  = -normalize(view_pos); // camera is at 0
	vec3  half_vec  =  normalize(view_dir + light_dir);
	
	float atten = 1 / (dist * dist);
	vec3 radiance = light.color * atten;
	
	const vec3 f0 = vec3(0.04);
	vec3 F = fresnel(max(dot(half_vec, view_dir), 0.0), mix(f0, albedo, metallic));
	
	float ndf = DistributionGGX(normal, half_vec, roughness);
	float G   = GeometrySmith(normal, view_dir, light_dir, roughness);
	
	vec3  numer = ndf * G * F;
	float denom = 4.0 * max(dot(normal, view_dir), 0.0) * max(dot(normal, light_dir), 0.0);
	vec3 specular = numer / max(denom, 0.001);
	
	vec3 kS = F;
	vec3 kD = vec3(1.0) - kS;
	
	kD *= 1.0 - metallic;
	
	float NdotL = max(dot(normal, light_dir), 0.0);
	light_accum += (kD * albedo / PI + specular) * radiance * NdotL;
	
	vec3 ambient = vec3(0.03) * albedo * ambient_o;
	
	//out_color = vec4(fs_in.uv, 0.0, 1);
	out_color = vec4(ambient + light_accum, 1);
}