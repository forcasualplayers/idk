#version 450

#define MAX_LIGHTS 8

U_LAYOUT(3,1) uniform BLOCK(PBRBlock)
{
	mat4 inverse_view_transform;
} PerCamera;

S_LAYOUT(2, 0) uniform sampler2D tex;
//S_LAYOUT(3, 1) uniform samplerCube test;

S_LAYOUT(6,1) uniform samplerCube irradiance_probe;
S_LAYOUT(6,2) uniform samplerCube environment_probe;
S_LAYOUT(6,3) uniform sampler2D   brdfLUT;  

layout(location=1) in VS_OUT
{
  vec3 position;
  vec2 uv;
  vec3 normal;
  vec3 tangent;
} fs_in;

// lighting 
// temporary light
struct Light
{
    int   type; // 0 for point, 1 for dir, 2 for spot
	vec3  color;
	
	vec3  v_pos;
	vec3  v_dir;
	
	float cos_inner;
	float cos_outer;
	
	float falloff;
	
	mat4 vp;
};

U_LAYOUT(5, 0) uniform BLOCK(LightBlock)
{
	int   light_count;
	Light lights[MAX_LIGHTS];
} LightBlk;
S_LAYOUT(6, 0) uniform sampler2D shadow_maps[MAX_LIGHTS];


// lighting functions 

const float PI = 3.1415926535;

vec3 fresnel(float cos_theta, vec3 f0)
{
	return f0 + (vec3(1.0) - f0) * pow(1.0 - cos_theta, 5.0);
}

vec3 fresnelRoughness(float cos_theta, vec3 f0, float roughness)
{
	return f0 + (vec3(1.0 - roughness) - f0) * pow(1.0 - cos_theta, 5.0);
}

float DistributionGGX(vec3 normal, vec3 half_vec, float roughness)
{
	float alpha  = roughness * roughness;
	float alpha2 = alpha * alpha;
	float NdotH  = max(dot(normal, half_vec), 0.0);
	float NdotH2 = NdotH * NdotH;
	
	float numer  = alpha2;
	float denom  = (NdotH2 * (alpha2 - 1.0) + 1.0);
	denom = PI * denom * denom;
	
	return numer / denom;
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
	float r = roughness + 1.0;
	float k = r *r / 8.0;
	
	float numer = NdotV;
	float denom = NdotV * (1.0 - k) + k;
	
	return numer / denom;
}

float GeometrySmith(vec3 normal, vec3 view, vec3 light, float roughness)
{
	float NdotV = max(dot(normal, view), 0.0);
	float NdotL = max(dot(normal, light), 0.0);
	
	float ggx2 = GeometrySchlickGGX(NdotV, roughness);
	float ggx1 = GeometrySchlickGGX(NdotL, roughness);
	
	return ggx1 * ggx2;
}

float ShadowCalculation(int iter, vec4 fPosInLS)
{
	 // perform perspective divide
    vec3 projCoords = fPosInLS.xyz / fPosInLS.w;
	
	//Transformation of proj coord to NDC[0,1]
	projCoords = (projCoords * 0.5f) + 0.5f; 
	
	//Get closest depth to light's pov
	float nearestDepth = texture(shadow_maps[iter], projCoords.xy).r; 
	
	//Get current light depth
	float curDepth = projCoords.z;  
	
	 // check if current frag is in shadow and return the result
    return (curDepth > nearestDepth)  ? 1.0f: 0.0f;
}

vec3 pbr(
	int i
,	vec3  view_pos
,	vec3  normal
,   vec3  reflected
,	vec3  albedo
,	float metallic
,	float roughness
,	float ambient_o
)
{
// temporary light code
	Light light = LightBlk.lights[i];
	
	vec3  light_dir =	light.v_pos - view_pos;
	if (light.type == 1) light_dir = -light.v_dir;
	
	float dist      =  length(light_dir); 
	light_dir /= dist;
	vec3  view_dir  = -normalize(view_pos); // camera is at 0
	vec3  half_vec  =  normalize(view_dir + light_dir);
	
	float atten = 1;
	
	if (light.type == 0 || light.type == 2) atten /= (dist * dist);
	
	atten = max(atten, 1);
	
	vec3 radiance = light.color.rgb * atten;
	
	const vec3 f0 = vec3(0.04);
	vec3 F = fresnel(max(dot(half_vec, view_dir), 0.0), mix(f0, albedo, metallic));
	
	float ndf = DistributionGGX(normal, half_vec, roughness);
	float G   = GeometrySmith(normal, view_dir, light_dir, roughness);
	
	vec3  numer = ndf * G * F;
	float denom = 4.0 * max(dot(normal, view_dir), 0.0) * max(dot(normal, light_dir), 0.0);
	vec3 specular = numer / max(denom, 0.001);
	
	vec3 kS = F;
	vec3 kD = vec3(1.0) - kS;
	
	float NdotL = max(dot(normal, light_dir), 0.0);
	
	kD *= 1.0 - metallic;
	
	return (kD * albedo / PI + specular) * radiance * NdotL;
}

//__MATERIAL_UNIFORMS__;

// forward shading only cares about color!
layout(location = 0)out vec4 out_color;

void main()
{
	// declare initial values here
	vec3  view_pos  = fs_in.position;
	vec3  normal    = normalize(fs_in.normal);
	vec3  tangent   = normalize(fs_in.tangent);
	vec2  uv        = fs_in.uv;
	
	vec3  albedo    = texture(tex, vec2(fs_in.uv)).xyz;//vec3(1, 0, 0);
	float metallic  = 0.5;
	float roughness = 1.0;
	float ambient_o = 0;
	
	vec3 view_dir = -normalize(view_pos);

	//__MATERIAL_CODE__;

	// then compute color here 
	
	vec3 light_accum = vec3(0);
	
	vec3 reflected = vec3(PerCamera.inverse_view_transform * vec4(reflect(-view_dir, normal),0));
	
	for (int i = 0; i < LightBlk.light_count; ++i)
		light_accum += (pbr(i, view_pos, normal, reflected, albedo, metallic, roughness, ambient_o)
//		             * (1.0f - ShadowCalculation(i,LightBlk.lights[i].vp * vec4(fs_in.position,1.0f)))
					 );
	
	vec3 F = mix(vec3(0.04), albedo, metallic);
	vec3 kS = fresnelRoughness(max(dot(normal,view_dir), 0.0), F, roughness);
	vec3 kD = 1.0 - kS;
	kD *= 1.0 - metallic;
	
	vec3 irradiance = texture(irradiance_probe, normal).rgb;
	vec3 diffuse = irradiance * albedo;
	
	const float MAX_REFLECTION_LOD = 4.0;
	
	vec3 prefilteredColor = textureLod(environment_probe, reflected, roughness * MAX_REFLECTION_LOD).rgb;
	vec2 envBRDF = texture(brdfLUT, vec2(max(dot(normal, view_dir), 0.0), roughness)).rg;
	vec3 specular = prefilteredColor * (kS * envBRDF.x + envBRDF.y);
	vec3 ambient = (kD * diffuse + specular) * ambient_o;
	
	vec3 color = light_accum + ambient;
	color = color / (color + vec3(1.0));
	color = pow(color, vec3(1.0/2.2)); 
	out_color = vec4(color, 1);
}