#pragma once
#include "TextureRenderMeta.h"

#define _INTERNAL_FORMAT_UNORM(COMPONENTS,SIZE) COMPONENTS ## _ ## SIZE
#define _INTERNAL_FORMAT_SNORM(COMPONENTS,SIZE) COMPONENTS ## _ ## SIZE ## _SNORM
#define _INTERNAL_FORMAT_F(COMPONENTS,SIZE) COMPONENTS ## _ ## SIZE ## _F
#define _INTERNAL_FORMAT_I(COMPONENTS,SIZE) COMPONENTS ## _ ## SIZE ## _I
#define _INTERNAL_FORMAT_UI(COMPONENTS,SIZE) COMPONENTS ## _ ## SIZE ## _UI

#define INTERNAL_FORMAT(COMPONENTS,SIZE,TYPE) _INTERNAL_FORMAT_ ## TYPE(COMPONENTS,SIZE)

namespace idk
{

	enum class TextureInternalFormat
	{
		None
		// unsigned normalized data
		, INTERNAL_FORMAT(R,    8,  UNORM)
		, INTERNAL_FORMAT(RG,   8,  UNORM)
		, INTERNAL_FORMAT(RGB,  8,  UNORM)
		, INTERNAL_FORMAT(RGBA, 8,  UNORM)
		, INTERNAL_FORMAT(BGRA, 8,  UNORM)
		, INTERNAL_FORMAT(R,    16, UNORM)
		, INTERNAL_FORMAT(RG,   16, UNORM)
		, INTERNAL_FORMAT(RGB,  16, UNORM)
		, INTERNAL_FORMAT(RGBA, 16, UNORM)

		// signed normalized data
		, INTERNAL_FORMAT(R,    8,  SNORM)
		, INTERNAL_FORMAT(RG,   8,  SNORM)
		, INTERNAL_FORMAT(RGB,  8,  SNORM)
		, INTERNAL_FORMAT(RGBA, 8,  SNORM)
		, INTERNAL_FORMAT(R,    16, SNORM)
		, INTERNAL_FORMAT(RG,   16, SNORM)
		, INTERNAL_FORMAT(RGB,  16, SNORM)
		, INTERNAL_FORMAT(RGBA, 16, SNORM)

		// unsigned integral data
		, INTERNAL_FORMAT(R,    8,  UI)
		, INTERNAL_FORMAT(RG,   8,  UI)
		, INTERNAL_FORMAT(RGB,  8,  UI)
		, INTERNAL_FORMAT(RGBA, 8,  UI)
		, INTERNAL_FORMAT(R,    16, UI)
		, INTERNAL_FORMAT(RG,   16, UI)
		, INTERNAL_FORMAT(RGB,  16, UI)
		, INTERNAL_FORMAT(RGBA, 16, UI)
		, INTERNAL_FORMAT(R,    32, UI)
		, INTERNAL_FORMAT(RG,   32, UI)
		, INTERNAL_FORMAT(RGB,  32, UI)
		, INTERNAL_FORMAT(RGBA, 32, UI)

		// signed intergral data
		, INTERNAL_FORMAT(R,    8,  I)
		, INTERNAL_FORMAT(RG,   8,  I)
		, INTERNAL_FORMAT(RGB,  8,  I)
		, INTERNAL_FORMAT(RGBA, 8,  I)
		, INTERNAL_FORMAT(R,    16, I)
		, INTERNAL_FORMAT(RG,   16, I)
		, INTERNAL_FORMAT(RGB,  16, I)
		, INTERNAL_FORMAT(RGBA, 16, I)
		, INTERNAL_FORMAT(R,    32, I)
		, INTERNAL_FORMAT(RG,   32, I)
		, INTERNAL_FORMAT(RGB,  32, I)
		, INTERNAL_FORMAT(RGBA, 32, I)
		, INTERNAL_FORMAT(R,    64, I)
		, INTERNAL_FORMAT(RG,   64, I)
		, INTERNAL_FORMAT(RGB,  64, I)
		, INTERNAL_FORMAT(RGBA, 64, I)
		
		// floating point data
		, INTERNAL_FORMAT(R,    16, F)
		, INTERNAL_FORMAT(RG,   16, F)
		, INTERNAL_FORMAT(RGB,  16, F)
		, INTERNAL_FORMAT(RGBA, 16, F)
		, INTERNAL_FORMAT(R,    32, F)
		, INTERNAL_FORMAT(RG,   32, F)
		, INTERNAL_FORMAT(RGB,  32, F)
		, INTERNAL_FORMAT(RGBA, 32, F)
		, INTERNAL_FORMAT(R,    64, F)
		, INTERNAL_FORMAT(RG,   64, F)
		, INTERNAL_FORMAT(RGB,  64, F)
		, INTERNAL_FORMAT(RGBA, 64, F)

		// compressed
		, RGB_DXT1
		, RGBA_DXT1
		, RGBA_DXT3
		, RGBA_DXT5

		// srgb
		, SRGB_8
		, SRGBA_8
		, SBGRA_8

		// compressed srgb
		, SRGB_DXT1
		, SRGBA_DXT1
		, SRGBA_DXT3
		, SRGBA_DXT5
		, SRGB_FIRST = SRGB_8
		, SRGB_LAST = SRGBA_DXT5

		// depth buffer
		, DEPTH_16
		, DEPTH_24
		, DEPTH_32
		, DEPTH_32_F
		, DEPTH_24_STENCIL_8
		, DEPTH_32_F_STENCIL_8
		, DEPTH_FIRST = DEPTH_16
		, DEPTH_LAST = DEPTH_32_F_STENCIL_8
	};

	TextureInternalFormat ToInternalFormat(ColorFormat, bool compressed);
	TextureInternalFormat ToInternalFormat(DepthBufferMode, bool stencil);
}