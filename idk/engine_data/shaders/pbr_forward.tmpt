#version 450

#define MAX_LIGHTS 8

U_LAYOUT(3,1) uniform BLOCK(PBRBlock)
{
	mat4 inverse_view_transform;
} PerCamera;

//S_LAYOUT(3, 1) uniform samplerCube test;

S_LAYOUT(6,1) uniform samplerCube irradiance_probe;
S_LAYOUT(6,2) uniform samplerCube environment_probe;
S_LAYOUT(6,3) uniform sampler2D   brdfLUT;  

layout(location=1) in VS_OUT
{
  vec3 position;
  vec2 uv;
  vec3 normal;
  vec3 tangent;
  vec4 color;
} fs_in;

// lighting 
// temporary light
import /engine_data/shaders/light.glsl

U_LAYOUT(5, 0) uniform BLOCK(LightBlock)
{
	int   light_count;
	Light lights[MAX_LIGHTS];
} LightBlk;

S_LAYOUT(7, 4) uniform sampler2D shadow_maps[MAX_LIGHTS];

// lighting functions 
import /engine_data/shaders/utils.glsl
import /engine_data/shaders/pbr_utils.glsl


//__MATERIAL_UNIFORMS__;

// forward shading only cares about color!
layout(location = 0)out vec4 out_color;

void main()
{
	// declare initial values here
	vec3  view_pos  = fs_in.position;
	vec3  normal    = normalize(fs_in.normal);
	vec3  tangent   = normalize(fs_in.tangent);
	vec2  uv        = fs_in.uv;
	
	vec3  albedo    = vec3(1, 1, 1);
	float metallic  = 0.5;
	float roughness = 1.0;
	float ambient_o = 0;
	vec3  emissive  = vec3(0);
	
	vec3 view_dir = -normalize(view_pos);

	//__MATERIAL_CODE__;

	// then compute color here 

	vec3 light_accum = vec3(0);
	normal = normalize(normal);
	
	vec3 reflected = vec3(PerCamera.inverse_view_transform * vec4(reflect(-view_dir, normal),0));
	
	vec4 world_pos = 
		PerCamera.inverse_view_transform *
		vec4(view_pos,1);
	
	for (int i = 0; i < 1; ++i)
	{
		vec3 result = pbr_metallic(LightBlk.lights[i], view_pos.xyz, normal, reflected, albedo, metallic, roughness, ambient_o); 
		
		if (LightBlk.lights[i].type == 1)
		{
			if(LightBlk.lights[i].cast_shadow!=0)
				result *= vec3(1.f - ShadowCalculation(LightBlk.lights[i],shadow_maps[i],(LightBlk.lights[i].v_dir) ,normal ,LightBlk.lights[i].vp * world_pos));
			//vvvp = LightBlk.lights[i].vp;
		}
		if (LightBlk.lights[i].type == 2)
		{
			if(LightBlk.lights[i].cast_shadow!=0)
				result *= (vec3(1-ShadowCalculation(LightBlk.lights[i],shadow_maps[i],LightBlk.lights[i].v_dir,normal ,LightBlk.lights[i].vp * world_pos)));
		}
		
		light_accum += result;
	}
	vec3 F = mix(vec3(0.04), albedo, metallic);
	vec3 kS = fresnelRoughness(max(dot(normal,view_dir), 0.0), F, roughness);
	vec3 kD = 1.0 - kS;
	kD *= 1.0 - metallic;
	
	
	vec3 irradiance = texture(irradiance_probe, normal).rgb;
	vec3 diffuse = irradiance * albedo;
	
	const float MAX_REFLECTION_LOD = 4.0;
	
	//vec3 prefilteredColor = textureLod(environment_probe, reflected, roughness * MAX_REFLECTION_LOD).rgb;
	//vec2 envBRDF = texture(brdfLUT, vec2(max(dot(normal, view_dir), 0.0), roughness)).rg;
	//vec3 specular = prefilteredColor * (kS * envBRDF.x + envBRDF.y);
	//vec3 ambient = (kD * diffuse + specular) * vec3(0.01);
	vec3 ambient = vec3(0.03) * albedo;
	
	vec3 color = light_accum + ambient + emissive;
	color = color / (color + vec3(1.0));
	#ifndef VULKAN
	color = pow(color, vec3(1.0/2.2)); 
	#endif
	out_color = vec4(color,1);
	
}