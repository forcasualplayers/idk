#version 460

layout(location =0)in VS_OUT
{
  vec3 position;
  vec2 uv;
  vec3 normal;
  vec3 tangent;
} fs_in;

//__MATERIAL_UNIFORMS__;

// declare output buffers here
layout(location = 0) out vec4 out_albedo_amb_o;
layout(location = 1) out vec4 out_uv_metallic_roughness;
layout(location = 2) out vec3 out_view_pos;
layout(location = 3) out vec3 out_normal;
layout(location = 4) out vec3 out_tangent;

vec3 Normal()
{
	return fs_in.normal;
}
vec3 Tangent()
{
	return fs_in.tangent;
}

//Helper functions begin
vec3 unpack_normal(vec3 normal_in)
{
	vec3 T = Tangent();
	vec3 N = Normal();
	vec3 B = cross(N, T);
	mat3 TBN = mat3(T,B,N);
	normal_in -= vec3(0.5);
	return normalize(TBN * normal_in);
}

void main()
{
	vec3  view_pos  = fs_in.position;
	vec3  normal    = normalize(fs_in.normal);
	vec3  tangent   = normalize(fs_in.tangent);
	vec2  uv        = fs_in.uv;

	// local scope here, graph will assign to this 

	vec3  albedo    = vec3(1, 1, 1);
	float metallic  = 0.5;
	float roughness = 1.0;
	float ambient_o = 0;
	
	vec3 view_dir = -normalize(view_pos);

	//__MATERIAL_CODE__;
	
	out_albedo_amb_o = vec4(albedo,ambient_o);
	out_uv_metallic_roughness = vec4(fs_in.uv,metallic,roughness);
	out_view_pos = view_pos;
	out_normal = normal;
	out_tangent = tangent;
}